#!/bin/bash

type=m1.medium
keypair=root
skip_ami_check=

while [ $# -gt 0 ] ; do
  case "$1" in
    -t | --type)    type="$2"; shift;;
    -k | --keypair) keypair="$2"; shift;;
    -n | --skip-check) skip_ami_check=yes;;
    --)             shift; break;;
    -*)             shift;;
    *)              break;;
  esac
  shift
done

bin=`dirname "$0"`
bin=`cd "$bin"; pwd`
export bin
if [ -f "$bin"/credentials.sh ] ; then
  source "$bin"/credentials.sh
fi
source "$bin"/env.sh
echo "S3_BUCKET is $S3_BUCKET"
echo "INSTANCE_TYPE is $type"
echo "IMAGE_VERSION is $IMAGE_VERSION"
echo "AWS_ENDPOINT is $AWS_ENDPOINT"
if [ -z "$skip_ami_check" ] ; then
  echo "Searching for existing AMI (may take some time if on a slow network, skip with '-n')..."
  AMI_IMAGE=`ec2-describe-images $TOOL_OPTS -a | grep $S3_ACCOUNT | grep $IMAGE_VERSION | grep available | awk '{print $2}'`
  [ ! -z $AMI_IMAGE ] && echo "AMI already registered, use: ec2-deregister $AMI_IMAGE" && exit 1
fi

echo "Searching for base AMI (may take some time if on a slow network)..."
BASE_AMI_IMAGE=`ec2-describe-images $TOOL_OPTS -a | grep $BASE_AMI_VERSION | awk '{print $2}'`
echo "BASE_AMI_IMAGE is $BASE_AMI_IMAGE"
echo "EC2-RUN ec2-run-instances $BASE_AMI_IMAGE $TOOL_OPTS -k $keypair -t $type"
OUTPUT=`ec2-run-instances $BASE_AMI_IMAGE $TOOL_OPTS -k $keypair -t $type`
INSTANCE=`echo $OUTPUT | awk '{print $6}'`
echo "INSTANCE is $INSTANCE"

echo -n "Polling instance status "
while true; do
  printf "."
  HOSTNAME=`ec2-describe-instances $TOOL_OPTS $INSTANCE | grep running | awk '{print $4}'`
  if [ ! -z $HOSTNAME ] ; then
    break;
  fi
  sleep 1
done
echo
echo "HOSTNAME is $HOSTNAME"
echo -n "Polling instance availability "
while true ; do
  printf "."
  REPLY=`ssh $SSH_OPTS "ec2-user@$HOSTNAME" 'echo hello'`
  if [ ! -z "$REPLY" ] ; then
    break
  fi
  sleep 5
done
echo

# Copy setup scripts

echo -n "Copying setup scripts... "
scp $SSH_OPTS "$bin"/env.sh "ec2-user@$HOSTNAME:/tmp/"
if [ -f "$bin"/credentials.sh ] ; then
  scp $SSH_OPTS "$bin"/credentials.sh "ec2-user@$HOSTNAME:/tmp/"
fi
scp $SSH_OPTS "$bin"/image/tarball/create-image-remote "ec2-user@$HOSTNAME:/tmp/"
echo

# Copy private key and certificate (for bundling image)

echo -n "Copying credentials... "
scp $SSH_OPTS $EC2_PRIVATE_KEY "ec2-user@$HOSTNAME:/tmp/key.pem"
scp $SSH_OPTS $EC2_CERT "ec2-user@$HOSTNAME:/tmp/cert.pem"
scp $SSH_OPTS "$bin"/jprofile_config.xml "ec2-user@$HOSTNAME:/tmp/jprofile_config.xml"

echo

# Connect to it and run the remote procedure
echo "Connecting to instance"
ssh $SSH_OPTS -t -t "ec2-user@$HOSTNAME" "/usr/bin/sudo -i /usr/bin/env IMAGE_VERSION=$IMAGE_VERSION S3_BUCKET=$S3_BUCKET /bin/bash /tmp/create-image-remote"

# Register image

echo "Registering new image"
ec2-register $TOOL_OPTS -n $IMAGE_VERSION $S3_BUCKET/$IMAGE_VERSION.manifest.xml

echo "Terminate with: ec2-terminate-instances $INSTANCE"
